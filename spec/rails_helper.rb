# spec/rails_helper.rb
# This file is auto-generated by the RSpec Rails suite.
#
# The following line is provided for convenience purposes. It has the downside
# of increasing the boot-up time by auto-requiring all files in the support
# directory. Alternatively, in the individual `*_spec.rb` files, manually
# require only the support files necessary.
#
# Dir[Rails.root.join('spec', 'support', '**', '*.rb')].sort.each { |f| require f }

require 'spec_helper'

ENV['RAILS_ENV'] ||= 'test'
require_relative '../config/environment'
# Prevent database truncation if the environment is production
abort("The Rails environment is running in production mode!") if Rails.env.production?
require 'rspec/rails'

# Remove the ActiveRecord migration check as the application does not use ActiveRecord.
# begin
#   ActiveRecord::Migration.maintain_test_schema!
# rescue ActiveRecord::PendingMigrationError => e
#   abort e.to_s.strip
# end

RSpec.configure do |config|
  # Remove this line if you're not using ActiveRecord fixtures
  # config.fixture_paths = [
  #   Rails.root.join('spec/fixtures')
  # ]

  # If you're not using ActiveRecord, these lines are also not needed.
  # config.use_transactional_fixtures = true
  # config.use_instantiated_fixtures = false # Added by default in recent Rails

  # RSpec Rails can automatically mix in different behaviours to your tests based on their file location, for example enabling you to call `get` and `post` in specs under `spec/requests`.
  # The different available behaviours are listed in the docs:
  # https://relishapp.com/rspec/rspec-rails/docs
  config.infer_spec_type_from_file_location!

  # Filter lines from Rails gems in backtraces.
  config.filter_rails_from_backtrace!
  # arbitrary gems may also be filtered from the backtrace.
  # config.filter_gems_from_backtrace("gem name")
end
